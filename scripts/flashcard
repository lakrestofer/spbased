#!/usr/bin/env zsh
zmodload zsh/zutil

command="${1:=help}"
id="$2"

if [[ $command == "help" ]]; then
  echo "usage: flashcard command [argument]"
  echo ""
  echo "examples:"
  echo "       flashcard add    # add a new flashcard interactively"
  echo "       flashcard edit 3 # edit a flashcard interactively"
  echo "       flashcard review # review a due or new flashcard"
  exit 0
fi


# optionally read in spbasedctl path from environment
if [[ -z $FLAKE_ROOT ]]; then
  # check that spbasedctl exist globally
  if which spbasedctl>/dev/null 2>&1; then
    SPBASEDCTL_BIN="spbasedctl"
  else
    gum log --level error "SPBASEDCTL_BIN was unset and spbasedctl not found on PATH! exiting..."
    exit 1
  fi
else
  SPBASEDCTL_BIN="$FLAKE_ROOT/target/debug/spbasedctl"
fi

add() {
  ## prompt the user for their question answer pair
  QUESTION=$(gum write --placeholder="question")
  ANSWER=$(gum write --placeholder="answer")

  ## Both question and answer must be set
  if [[ -z "$QUESTION" || -z "$ANSWER" ]]; then
    gum log --level error "must provide non empty input"
    exit 1
  fi


  FLASHCARD=$(jq --compact-output --null-input --arg question "$QUESTION" --arg answer "$ANSWER" '.question = $question | .answer = $answer')

  "$SPBASEDCTL_BIN" items add --model "flashcard" --data "$FLASHCARD"
}
edit() {
  if [[ -z $id ]]; then
    echo "usage: flashcard edit <item_id>"
    exit 1
  fi


  FLASHCARD=$("$SPBASEDCTL_BIN" items query --pre-filter="id==$id && model=='flashcard'" --post-filter="[0].{id:id,data:data}")
  FLASHCARD_ID=$(echo $FLASHCARD | jq ".id")
  FLASHCARD_DATA=$(echo $FLASHCARD | jq ".data")

  QUESTION=$(echo $FLASHCARD_DATA | jq -r ".question")
  ANSWER=$(echo $FLASHCARD_DATA | jq -r ".answer")

  QUESTION=$(gum write --placeholder="question" --value="$QUESTION")
  ANSWER=$(gum write --placeholder="answer" --value="$ANSWER")

  ## Both question and answer must be set
  if [[ -z "$QUESTION" || -z "$ANSWER" ]]; then
    echo "must provide non empty input"
    exit 0
  fi

  FLASHCARD=$(jq --compact-output --null-input --arg question $QUESTION --arg answer "$ANSWER" '.question = $question | .answer = $answer')

  "$SPBASEDCTL_BIN" items edit  --data "$FLASHCARD" "$id"
}
review() {
  N_NEW=$("$SPBASEDCTL_BIN" review query-count new)
  N_DUE=$("$SPBASEDCTL_BIN" review query-count due)
  gum log --level info "You have $N_DUE flashcards that are due and $N_NEW that are new"

  if [[ $N_NEW == "0" && $N_DUE == "0" ]]; then
    gum log --level info "No flashcards are new or due. Exiting..."
    exit 0
  fi

  if [[ $N_DUE != "0" ]]; then REVIEW_CHOICE="due"
  else
   REVIEW_CHOICE="new"
  fi

  if [[ $REVIEW_CHOICE == "new" ]]; then
    FLASHCARD=$("$SPBASEDCTL_BIN" review next new --pre-filter="model=='flashcard'")
  else
    FLASHCARD=$("$SPBASEDCTL_BIN" review next due --pre-filter="model=='flashcard'")  
  fi

  if [[ -z $FLASHCARD || $FLASHCARD == "null" ]]; then
    gum log --level error "could not find any $REVIEW_CHOICE item"
    exit 0
  fi

  FLASHCARD_ID=$(echo $FLASHCARD | jq ".id")
  FLASHCARD_CREATED_AT=$(echo $FLASHCARD | jq ".created_at" | cut -c2-11)
  FLASHCARD_DATA=$(echo $FLASHCARD | jq ".data")

  QUESTION=$(echo $FLASHCARD_DATA | jq -r ".question")
  ANSWER=$(echo $FLASHCARD_DATA | jq -r ".answer")

  # show the question
  gum style  --underline --align center --width 50 "Item ? - Question" 
  echo "$QUESTION" | glow

  # await response to continue
  gum confirm "Show answer" --affirmative="Heck yeah!" --negative="No I'm scared, exit plz" || exit 0

  # show the answer
  gum style  --underline --align center --width 50 "Item $FLASHCARD_ID ($FLASHCARD_CREATED_AT) - Answer" 
  echo "$ANSWER" | glow

  # prompt for how well it went
  AGAIN="again (could not answer)"
  HARD="hard (could answer with difficulty)"
  GOOD="good (could answer)"
  EASY="easy (could answer easily)"

  RESULT=$(gum choose --header "How easy was it to answer the prompt?" --selected="$GOOD" "$AGAIN" "$HARD" "$GOOD" "$EASY" | cut -d " " -f1)

  "$SPBASEDCTL_BIN" review score "$FLASHCARD_ID" "$RESULT"
}

case "$command" in
  "add") add;;
  "edit") edit;;
  "review") review;;
esac
